attacker:
  username: \var{context.attacker.username}
  password: \var{context.attacker.password}
  password_salt: \var{context.attacker.password_salt}
  sudo:
    hosts: ALL
    as: ALL
    commands: ALL
    nopasswd: yes

attacker_user:
  name: "{{ attacker.username }}"
  shell: '/bin/bash'
  password: "{{ attacker.password | password_hash('sha512', attacker.password_salt) }}"
  authorized_keys:
    - key: "{{ management_user_key }}"
      exclusive: no
  sudo: "{{ attacker.sudo | default({}, True) }}"

# select random remote employee index and use it for openvpn connection
attack_openvpn_employee_index: "\var{gen.random.randint(0, (context.employees.external | length) - 1)}"
attack_openvpn_employee: "{{ employees[remote_employees[openvpn_employee_index]] }}"

# all possible admin users
attack_shell_admins: "{{ employees.values() | selectattr('wp_role', 'defined') | selectattr('ssh_admin', 'defined') | selectattr('ssh_admin', 'equalto', 'yes') | list }}"
# select one random admin user to escalate to after reverse shell connection
attack_shell_user: "{{ attack_shell_admins[(attack_shell_admins | length) | random(seed=inventory_hostname)] }}"

attacker_packages:
  - nmap
  - proxychains4
  - python3 
  - python3-pip 
  - python3-dev 
  - git 
  - libssl-dev 
  - libffi-dev 
  - build-essential
  - python-virtualenv
  - python3-virtualenv
  - expect
  - nikto
  - dirb
  - gnupg2
  - curl  
  - traceroute
  - libcurl4-openssl-dev 
  - make 
  - zlib1g-dev
  - gawk 
  - g++ 
  - gcc 
  - libreadline6-dev 
  - libssl-dev 
  - libyaml-dev
  - liblzma-dev 
  - autoconf 
  - libgdbm-dev 
  - libncurses5-dev 
  - automake
  - libtool 
  - bison 
  - pkg-config 
  - ruby 
  - ruby-bundler 
  - ruby-dev 
  - libsqlite3-dev 
  - sqlite3

# network information

firewall_interfaces_names: "{{ hostvars['inet-firewall'].ansible_interfaces | map('extract', hostvars['inet-firewall'].ansible_facts) | selectattr('macaddress', 'defined') }}"
firewall_interfaces:
  inet: "{{ (firewall_interfaces_names | selectattr('macaddress', 'equalto', hostvars['inet-firewall'].openstack.addresses.internet[0]['OS-EXT-IPS-MAC:mac_addr']))[0] }}"
  lan:  "{{ (firewall_interfaces_names | selectattr('macaddress', 'equalto', hostvars['inet-firewall'].openstack.addresses.local[0]['OS-EXT-IPS-MAC:mac_addr']))[0] }}"
  dmz: "{{ (firewall_interfaces_names | selectattr('macaddress', 'equalto', hostvars['inet-firewall'].openstack.addresses.dmz[0]['OS-EXT-IPS-MAC:mac_addr']))[0] }}"

firewall_cidrs: |
  {
    {% for name,inf in firewall_interfaces.items() %}
    {#
      use ipaddr filter to get cidr notation e.g.,
      192.168.1.0/255.255.255.0 -> 192.168.1.0/24
    #}
    "{{ name }}": "{{ (inf.ipv4.network+'/'+inf.ipv4.netmask) | ansible.netcommon.ipaddr('net') }}"{% if not loop.last %},{% endif %}
    {% endfor %}
  }
