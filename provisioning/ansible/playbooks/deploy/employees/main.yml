- name: Setup employee users and packages
  hosts: employee
  roles:
    - python
    - role: grog.user
      become: yes
      vars:
        user_list: "{{ [ employee_user ] }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        user_list_host: []
        user_list_group: []
    - role: grog.authorized-key
      become: yes
      vars:
        authorized_key_list: "{{ [ employee_user ] }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        authorized_key_host: []
        authorized_key_group: []
    - role: grog.sudo
      become: yes
      vars:
        sudo_list: "{{ [ employee_user ] }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        sudo_host: []
        sudo_group: []
    - cifs-mounts
  tasks:
    - name: Install employee packages
      become: yes
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      loop: "{{ employee_packages }}"

    - name: Ensure ssh directory exists
      file:
        name: "/home/{{ employee_user.name }}/.ssh"
        state: directory
        owner: "{{ employee_user.name }}"
        group: "{{ employee_user.name }}"
      when: employee.ssh_key is defined and employee.ssh_key|bool

    - name: Deploy SSH keys
      become: yes
      copy:
        src: "{{ ssh_keys_base_path }}/{{ employee_id }}/id_rsa"
        dest: "/home/{{ employee_user.name }}/.ssh/id_rsa"
        owner: "{{ employee_user.name }}"
        group: "{{ employee_user.name }}"
        mode: "0600"
      when: employee.ssh_key is defined and employee.ssh_key|bool

    - name: Deploy SSH public keys
      become: yes
      copy:
        src: "{{ ssh_keys_base_path }}/{{ employee_id }}/id_rsa.pub"
        dest: "/home/{{ employee_user.name }}/.ssh/id_rsa.pub"
        owner: "{{ employee_user.name }}"
        group: "{{ employee_user.name }}"
      when: employee.ssh_key is defined and employee.ssh_key|bool


- name: Setup SSH users
  hosts: servers
  roles:
    - role: grog.user
      become: yes
      vars:
        user_list: "{{ server_ssh_users }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        user_list_host: []
        user_list_group: []
    - role: grog.authorized-key
      become: yes
      vars:
        authorized_key_list: "{{ server_ssh_users }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        authorized_key_host: []
        authorized_key_group: []
    - role: grog.sudo
      become: yes
      vars:
        sudo_list: "{{ server_ssh_users }}"
        # ensure no weird vars get in by setting
        # the extra lists to empty
        sudo_host: []
        sudo_group: []
        