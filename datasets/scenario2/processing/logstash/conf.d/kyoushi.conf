filter {
    if [type] == "kyoushi" {
        if [event] {
            # cr-kyoushi-simulation <= 0.3.7 logs the messages in the `event` field
            # so we need to rename it to message to be able to use the event field
            # for ecs conform information (e.g., event.category etc.)
            mutate {
                rename => ["event", "message" ]
            }
        }

        if [message] {
            mutate {
                # add field for keyword version of message
                # this will be easier to query
                copy => {
                    "message" => "message_keyword"
                }
            }
        }

        if [message_keyword] {
            mutate {
                # ensure categories are all lowercase
                lowercase =>  ["message_keyword"]
                # replace spaces with _
                gsub => ["message_keyword", " ", "_"]
            }
        }

        # fix user log field to conform to ecs
        if [user] {
            mutate {
                rename => ["user", "[user][name]"]
            }
        }

        # fix url field to conform to ecs
        if [url] {
            mutate{
                rename => ["url", "[url][full]"]
            }
        }

        # socket info tuple list into dict
        if [listen_socket] {
            ruby {
                code => '
                    s = event.get("listen_socket")
                    info = {
                        "host": s[0],
                        "port": s[1],
                        "flowinfo": s[2],
                        "scope_id": s[3]
                    }
                    event.set("listen_socket", info)
                '
            }
        }

        # socket info tuple list into dict
        if [remote_socket] {
            ruby {
                code => '
                    s = event.get("remote_socket")
                    info = {
                        "host": s[0],
                        "port": s[1],
                        "flowinfo": s[2],
                        "scope_id": s[3]
                    }
                    event.set("remote_socket", info)
                '
            }
        }

        if ![@metadata][kyoushi][sm] {
            # add a default sm type field
            mutate { add_field => { "[@metadata][kyoushi][sm]" => "sm" } }
        }

        if [current_state] {
            
            mutate {
                add_field => {
                    # set event category to <sm type>_<state>
                    "[event][category]" => "%{[@metadata][kyoushi][sm]}_%{current_state}"
                    "[event][action]" => "%{transition}"

                }
            }

        } else {
            mutate {
                add_field => {
                        # set event category to <sm type>.<state>
                        "[event][category]" => "%{[@metadata][kyoushi][sm]}"
                }
            }
        }

        # fix directory field conflict
        if [directory] and [transition] != "owncloud_open_directory" {
            mutate {
                rename => ["directory", "directory_name"]
            }
        }

        date {
            # update the event timestamp to the correct recorded value
            match => ["timestamp", "UNIX", "ISO8601"]
            timezone => "%{[@metadata][event][timezone]}"
            remove_field => "timestamp"
        }   
    }
}
