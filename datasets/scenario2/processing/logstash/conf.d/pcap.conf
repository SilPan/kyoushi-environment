filter {
    if [type] == "pcap" {
        
        mutate {
            add_field => {
                # future versions could assign category depeding on packet (e.g. http, ssh, ...)
                "[event][category]" => "pcap"
            }
            # add protocol as category
            copy => {
                "protocol" => "[event][category]"
            }
            # ensure categories are all lowercase
            lowercase =>  ["[event][category]"]
        }

        # some HTTP traffic is marked as tls
        if [layers][http] {
            mutate {
                add_field => {
                    "[event][category]" => "http"
                }
            }
        }

        if [layers][http][http_http_request] {
            mutate {
                add_field => {
                    "[event][action]" => "request"
                    "[url][full]" => "%{[layers][http][http_http_host]}%{[layers][http][http_http_request_uri]}"
                }
            }

        } else if [layers][http][http_http_response] {
            mutate {
                add_field => {
                    "[event][action]" => "response"
                }
                copy => {
                    "[layers][http][http_http_response_for_uri]" => "[url][full]"
                }
            }
            mutate {
                gsub => [
                    "[url][full]", "^https?://", ""
                ]
            }
        } else if [layers][dns][dns_dns_flags_response] {
            mutate {
                add_field => {
                    "[event][action]" => "response"
                }
            }
        } else if [layers][dns] and ![layers][dns][dns_dns_flags_response] {
            mutate {
                add_field => {
                    "[event][action]" => "response"
                }
            }
        }

        # remove empty fields
        if [source] == "" {
            mutate {
                remove_field => ["source"]
            }
        }

        if [destination] == "" {
            mutate {
                remove_field => ["destination"]
            }
        }

        if [source] {
            mutate {
                rename => {
                    "source" => "[source][ip]"
                }
            }
        }

        if [destination] {
            mutate {
                rename => {
                    "destination" => "[destination][ip]"
                }
            }
        }

        if [layers][udp] {
            mutate {
                copy => {
                    "[layers][udp][udp_udp_dstport]" => "[destination][port]"
                    "[layers][udp][udp_udp_srcport]" => "[source][port]"
                }
            }
        }

        if [layers][tcp] {
            mutate {
                copy => {
                    "[layers][tcp][tcp_tcp_dstport]" => "[destination][port]"
                    "[layers][tcp][tcp_tcp_srcport]" => "[source][port]"
                }
            }
        }




        if [layers][dns][dns_dns_id] {
            ruby {
                code => "event.set('[layers][dns][dns_dns_id]', event.get('[layers][dhcp][dns_dns_id]').to_s.hex)"
            }
        }

        if [layers][dns][dns_dns_flags] {
            ruby {
                code => "event.set('[layers][dns][dns_dns_flags]', event.get('[layers][dns][dns_dns_flags]').to_s.hex)"
            }
        }

        if [layers][dns][dns_dns_qry_class] {
            ruby {
                code => "event.set('[layers][dns][dns_dns_qry_class]', event.get('[layers][dns][dns_dns_qry_class]').to_s.hex)"
            }
        }

        if [layers][dns][dns_dns_resp_class] {
            ruby {
                code => "event.set('[layers][dns][dns_dns_resp_class]', event.get('[layers][dns][dns_dns_resp_class]').to_s.hex)"
            }
        }
        

        date {
            # update the event timestamp to the correct recorded value
            match => ["timestamp", "UNIX_MS", "UNIX", "ISO8601"]
            remove_field => "timestamp"
        }   
    }
}