filter {
    if [type] == "dnsmasq" {
        mutate {
            # remove manually set hostname so that we dont end up with a list
            # since auth and syslog groks will set the hostname
            remove_field => "[host][hostname]"

            add_field => {
                "[event][category]" => "dnsmasq"
            }
        }
        
        grok {
            match => { "message" => [
                    "%{SYSLOGBASE2} query\[%{DATA:[dns][question][type]}\] %{DATA:[dns][question][name]} from %{IP:[source][address]}",
                    "%{SYSLOGBASE2} %{DNSANSWERMODE:[dns][answers][mode]} %{DATA:[dns][answers][name]} is %{GREEDYDATA:[dns][answers][data]}",
                    "%{SYSLOGBASE2} forwarded %{DATA:[dns][question][name]} to %{IPORHOST:[destination][address]}",
                    "%{SYSLOGLINE}"
                ] 
            }
            pattern_definitions => {
                "DNSANSWERMODE" => "(?:(reply)|(cached))"
            }
            overwrite => [ "message" ]
        }

        ruby {
            # manually add the year since syslog/auth.log
            # do not include this information
            # this is a simple approach and will break if dataset crosses
            # year boundary
            code => '
                year = @@observe_start.time.strftime("%Y")
                event.set("timestamp",  year+" "+event.get("timestamp"))
            '
        }

        date {
            match => [ "timestamp", "yyyy MMM  d HH:mm:ss", "yyyy MMM dd HH:mm:ss" ]
            remove_field => "timestamp"
            timezone => "%{[@metadata][event][timezone]}"
        }

        if [dns][question][type] {
            mutate {
                add_field => { 
                    "[dns][op_code]" => "QUERY" 
                    "[event][action]" => "query"
                }
            }
        }
        if [dns][answers] {
            mutate {
                add_field => {
                    "[event][action]" => "response"
                }
            }
        }

        if [source][address] {
            mutate {
                copy => { "[source][address]" => "[source][ip]" }
            }
        }

        if [destination][address] {
            mutate {
                copy => { "[destination][address]" => "[destination][ip]" }
                add_field => {
                    "[event][action]" => "forwarded"
                }
            }
        }
    }
}