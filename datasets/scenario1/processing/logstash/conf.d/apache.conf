filter {
    if [type] == "apache_access" {
      mutate {
        add_field => { 
          "[event][category]" => "apache"
          "[event][action]" => "access" 
        }
      }
      # parse apache access logs
      grok {
        match => { 
            "message" => [
                "%{HTTPD_COMBINEDLOG}",
                "%{IPORHOST:[source][address]} - %{DATA:[user][name]} \\[%{HTTPDATE:timestamp}\\] \"-\" %{INT:[http][response][status_code]:int} %{INT:[http][response][body][bytes]:int}"
            ] 
        }
        tag_on_failure => ["_grokparsefailure", "fallback_timestamp"]
      }

      # add full uris
      if [url][original] {
        mutate {
          # using schema less version
          add_field => {
              "[url][full]" => "%{[host][fqdn]}%{[url][original]}"
          }
        }
      }

      date {
        match => [ "timestamp", "dd/MMM/YYYY:H:m:s Z" ]
        remove_field => "timestamp"
      }

      useragent {
        source => "[apache2][access][agent]"
        target => "[apache2][access][user_agent]"
        remove_field => "[apache2][access][agent]"
      }


    
    } else if [type] == "apache_error" {
      
      mutate {
        add_field => { 
          "[event][category]" => "apache"
          "[event][action]" => "error" 
        }
      }

      # parse apache error logs
      grok {
        match => { 
          "message" => [
            "%{PHPERROR}",
            "%{HTTPD_ERRORLOG}"
          ] 
        }

        pattern_definitions => {
          "AH00687" => "Negotiation: discovered file\(s\) matching request: %{DATA:[apache][error][path]} \(None could be negotiated\)\.\s*"
          "AH01276" => "Cannot serve directory %{DATA:[apache][error][path]}: No matching DirectoryIndex \(%{DATA}\) found, and server-generated directory index forbidden by Options directive"
          "AH01630" => "(client denied by server configuration:) %{GREEDYDATA:[apache][error][path]}"
          "PHPSTAT" => "script '%{DATA:[php][error][script]}' not found or unable to stat"
          "HTTPD_ERRORMESSAGE" => "%{AH00687}|%{AH01276}|%{AH01630}|%{PHPSTAT}|%{GREEDYDATA}"
          "HTTPD20_ERRORLOG" => "\[%{HTTPDERROR_DATE:timestamp}\] \[%{LOGLEVEL:[log][level]}\] (?:\[client %{IPORHOST:[source][address]}\] )?%{HTTPD_ERRORMESSAGE:message}"
          "HTTPD24_ERRORLOG" => "\[%{HTTPDERROR_DATE:timestamp}\] \[(?:%{WORD:[apache][error][module]})?:%{LOGLEVEL:[log][level]}\] \[pid %{POSINT:[process][pid]:int}(:tid %{INT:[process][thread][id]:int})?\](?: \(%{POSINT:[apache][error][proxy][error][code]?}\)%{DATA:[apache][error][proxy][error][message]}:)?(?: \[client %{IPORHOST:[source][address]}(?::%{POSINT:[source][port]:int})?\])?(?: %{DATA:[error][code]}:)? %{HTTPD_ERRORMESSAGE:message}"
          "PHPERROR_CODE" => "(PHP %{DATA:[php][error][level]})"
          "PHPERROR_MESSAGE" => "(%{DATA:[error][message]} in %{UNIXPATH:[php][error][script]} on line %{POSINT:[php][error][line]:int})$"
          "PHPERROR" => "\[%{HTTPDERROR_DATE:timestamp}\] \[(?:%{WORD:[apache][error][module]})?:%{LOGLEVEL:[log][level]}\] \[pid %{POSINT:[process][pid]:int}(:tid %{INT:[process][thread][id]:int})?\](?: \(%{POSINT:[apache][error][proxy][error][code]?}\)%{DATA:[apache][error][proxy][error][message]}:)?(?: \[client %{IPORHOST:[source][address]}(?::%{POSINT:[source][port]:int})?\])?(?: %{PHPERROR_CODE:[error][code]}:)?\s+%{PHPERROR_MESSAGE:message}"
        }

        tag_on_failure => ["_grokparsefailure", "fallback_timestamp"]
        overwrite => [ "message" ]
      }

      if [@metadata][kyoushi][httpd_dirs] {
        if [php][error][script] {
          ruby {
            code => '
                original = event.get("[php][error][script]")
                fqdn = event.get("[host][fqdn]")
                event.get("[@metadata][kyoushi][httpd_dirs]").each_slice(2) { |key, sub|
                  original = original.gsub(key, sub)
                }
                event.set("[url][full]", fqdn+original)
            '
          }
        }

        if [apache][error][path] {
          ruby {
            code => '
                original = event.get("[apache][error][path]")
                fqdn = event.get("[host][fqdn]")
                event.get("[@metadata][kyoushi][httpd_dirs]").each_slice(2) { |key, sub|
                  original = original.gsub(key, sub)
                }
                event.set("[url][full]", fqdn+original)
            '
          }
        }
        
      }

      date {
        match => [ "timestamp", "EEE MMM dd H:m:s YYYY", "EEE MMM dd H:m:s.SSSSSS YYYY" ]
        remove_field => "timestamp"
        timezone => "%{[@metadata][event][timezone]}"
      }

    }
    
    if "_grokparsefailure" in [tags] {
        ruby { 
            code => '
                event.set("@timestamp", @@fallback_timestamp[event.get("[host][name]")+event.get("type")])
            ' 
        }
    } else {
        ruby { code => '@@fallback_timestamp[event.get("[host][name]")+event.get("type")] = event.get("@timestamp")' }
    }
}